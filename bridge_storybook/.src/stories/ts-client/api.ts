/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetStoryFullPathsReturn
 */
export interface GetStoryFullPathsReturn {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetStoryFullPathsReturn
     */
    'story_full_paths': Array<string>;
}
/**
 * 
 * @export
 * @interface GetStoryInput
 */
export interface GetStoryInput {
    /**
     * 
     * @type {string}
     * @memberof GetStoryInput
     */
    'story_full_paths': string;
}
/**
 * 
 * @export
 * @interface GetTitlesReturn
 */
export interface GetTitlesReturn {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetTitlesReturn
     */
    'titles': Array<string>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Story
 */
export interface Story {
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof Story
     */
    'meta': object | null;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    'parent': string;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    'full_path': string;
    /**
     * 
     * @type {object}
     * @memberof Story
     */
    'kwargs': object | null;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    'docs': string | null;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    'source': string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Story
     */
    'typehints': { [key: string]: string; } | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All Story Full Paths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStoryFullPathsAllStoryFullPathsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/all_story_full_paths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Api Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSchemaApiSchemaGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Story
         * @param {GetStoryInput} getStoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoryStoryPost: async (getStoryInput: GetStoryInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getStoryInput' is not null or undefined
            assertParamExists('getStoryStoryPost', 'getStoryInput', getStoryInput)
            const localVarPath = `/story`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getStoryInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitlesTitlesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/titles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Registor Managers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registorManagersRegisterManagersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/register_managers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All Story Full Paths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllStoryFullPathsAllStoryFullPathsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStoryFullPathsReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllStoryFullPathsAllStoryFullPathsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllStoryFullPathsAllStoryFullPathsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Api Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSchemaApiSchemaGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSchemaApiSchemaGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getApiSchemaApiSchemaGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Story
         * @param {GetStoryInput} getStoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoryStoryPost(getStoryInput: GetStoryInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Story>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStoryStoryPost(getStoryInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStoryStoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTitlesTitlesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTitlesReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTitlesTitlesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTitlesTitlesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Registor Managers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registorManagersRegisterManagersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registorManagersRegisterManagersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registorManagersRegisterManagersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All Story Full Paths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStoryFullPathsAllStoryFullPathsGet(options?: any): AxiosPromise<GetStoryFullPathsReturn> {
            return localVarFp.getAllStoryFullPathsAllStoryFullPathsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Api Schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSchemaApiSchemaGet(options?: any): AxiosPromise<any> {
            return localVarFp.getApiSchemaApiSchemaGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Story
         * @param {GetStoryInput} getStoryInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoryStoryPost(getStoryInput: GetStoryInput, options?: any): AxiosPromise<Story> {
            return localVarFp.getStoryStoryPost(getStoryInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitlesTitlesGet(options?: any): AxiosPromise<GetTitlesReturn> {
            return localVarFp.getTitlesTitlesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Registor Managers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registorManagersRegisterManagersGet(options?: any): AxiosPromise<string> {
            return localVarFp.registorManagersRegisterManagersGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get All Story Full Paths
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllStoryFullPathsAllStoryFullPathsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllStoryFullPathsAllStoryFullPathsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Api Schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiSchemaApiSchemaGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiSchemaApiSchemaGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Story
     * @param {GetStoryInput} getStoryInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStoryStoryPost(getStoryInput: GetStoryInput, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStoryStoryPost(getStoryInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Titles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTitlesTitlesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTitlesTitlesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Registor Managers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registorManagersRegisterManagersGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registorManagersRegisterManagersGet(options).then((request) => request(this.axios, this.basePath));
    }
}



